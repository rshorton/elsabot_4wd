# Useful documentation:
# http://docs.ros.org/en/melodic/api/robot_localization/html/state_estimation_nodes.html
# https://vimeo.com/142624091
# https://www.robotandchisel.com/2020/05/01/outdoor-navigation/

local_ekf_filter_node:
    ros__parameters:
        frequency: 5.0
        two_d_mode: true
        publish_tf: true
 
        odom_frame: odom            
        base_link_frame: base_footprint 
        world_frame: odom 

        # config matrix legend    
        #x     , y     , z,
        #roll  , pitch , yaw,
        #vx    , vy    , vz,
        #vroll , vpitch, vyaw,
        #ax    , ay    , az
        odom0: odom/unfiltered
        odom0_config: [false, false, false,
                       false, false, false,
                       true, true, false,
                       false, false, true,
                       false, false, false]

        imu0: imu/data
        imu0_config: [false, false, false,
                      false, false, false,
                      false, false, false,
                      false, false, true,
                      false, false, false]
        imu0_differential: true
        imu0_remove_gravitational_acceleration: true                      


global_ekf_filter_node:
    ros__parameters:
        frequency: 5.0
        two_d_mode: true
        publish_tf: true
 
        map_frame: map             
        odom_frame: odom            
        base_link_frame: base_footprint 
        world_frame: map 

        # config matrix legend    
        #x     , y     , z,
        #roll  , pitch , yaw,
        #vx    , vy    , vz,
        #vroll , vpitch, vyaw,
        #ax    , ay    , az

        odom0: odom/unfiltered
        odom0_config: [false, false, false,
                       false, false, false,
                       true, true, false,
                       false, false, true,
                       false, false, false]

        odom1: odometry/gps
        odom1_config: [true,  true,  false,
                       false, false, false,
                       false, false, false,
                       false, false, false,
                       false, false, false]
        odom0_differential: false
        odom0_nodelay: true
        odom0_queue_size: 10

        # More useful data is available in the
        # imu message after the Madgwich filtering
        imu0: imu/data
        imu0_config: [false, false, false,
                      true,  true,  true,
                      false, false, false,
                      true,  true,  true,
                      true,  true,  true]
        imu0_remove_gravitational_acceleration: true

navsat_transform_node:
    ros__parameters:
# Frequency of the main run loop
        frequency: 5.0

# Delay time, in seconds, before we calculate the transform from the UTM frame to your world frame. This is especially
# important if you have use_odometry_yaw set to true. Defaults to 0.
        delay: 3.0

# PLEASE READ: Like all nodes in robot_localization, this node assumes that your IMU data is reported in the ENU frame.
# Many IMUs report data in the NED frame, so you'll want to verify that your data is in the correct frame before using
# it. 

# If your IMU does not account for magnetic declination, enter the value for your location here. If you don't know it,
# see http://www.ngdc.noaa.gov/geomag-web/ (make sure to convert the value to radians). This parameter is mandatory.
        magnetic_declination_radians: -0.0468

# Your IMU's yaw, once the magentic_declination_radians value is added to it, should report 0 when facing east. If it
# doesn't, enter the offset here. Defaults to 0.
        yaw_offset: 0.0

# If this is true, the altitude is set to 0 in the output odometry message. Defaults to false.
        zero_altitude: true

# If this is true, the transform world_frame->utm transform is broadcast for use by other nodes. Defaults to false.
        # Deprecated name
        #broadcast_utm_transform: true
        broadcast_cartesian_transform: false

# If this is true, the utm->world_frame transform will be published instead of the world_frame->utm transform. 
# Note that broadcast_utm_transform still has to be enabled. Defaults to false.
        broadcast_utm_transform_as_parent_frame: false

# If this is true, all received odometry data is converted back to a lat/lon and published as a NavSatFix message as
# /gps/filtered. Defaults to false.
        publish_filtered_gps: true

# If this is true, the node ignores the IMU data and gets its heading from the odometry source (typically the
# /odometry/filtered topic coming from one of robot_localization's state estimation nodes). BE CAREFUL when using this!
# The yaw value in your odometry source *must* be world-referenced, e.g., you cannot use your odometry source for yaw
# if your yaw data is based purely on integrated velocities. Defaults to false.
        use_odometry_yaw: false

# If true, will retrieve the datum from the 'datum' parameter below, if available. If no 'datum' parameter exists,
# navsat_transform_node will wait until the user calls the 'datum' service with the SetDatum service message.
        wait_for_datum: false

# Instead of using the first GPS location and IMU-based heading for the local-frame origin, users can specify the
# origin (datum) using this parameter. The fields in the parameter represent latitude and longitude in decimal degrees,
# and heading in radians. As navsat_transform_node assumes an ENU standard, a 0 heading corresponds to east.
#        datum: [55.944904, -3.186693, 0.0]
